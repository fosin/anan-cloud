logging:
  # pattern:
  #   file: '%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{50} %msg%n%throwablen%'
  #   console: '%highlight(%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level) %cyan(%logger{50}) %highlight(%msg%n%throwablen%)'
  # file:
  #   max-size: 50MB
  #   max-history: 7
  #   name: logs/${spring.application.name}.log
  #   total-size-cap: 400MB
  #   clean-history-on-start: true
  level:
    com.alibaba.nacos.naming.log.level: warn
    com.alibaba.nacos.client.naming: warn
    com.alibaba.nacos.client.config: warn
    #打印SQL语句（需改成DEBUG）
    org.hibernate.SQL: DEBUG
    #打印SQL语句参数（需改成TRACE）
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    #打印SQL执行结果（需改成TRACE）
    org.hibernate.type.descriptor.sql.BasicExtractor: INFO
    #打印查询中命名参数的值
    org.hibernate.engine.spi.QueryParameters: DEBUG
    org.hibernate.engine.query.spi.HQLQueryPlan: DEBUG
    #    zipkin2: debug
    #top.fosin.anan.security: DEBUG
    #org.springframework.security: DEBUG
spring:
  datasource:
    url: ${anan.datasource.url}
    username: ${anan.datasource.username}
    password: ${anan.datasource.password}
    #    type: com.alibaba.druid.pool.DruidDataSource
    # Hikari 连接池配置
    hikari:
      # 最小空闲连接数量
      minimum-idle: 1
      # 空闲连接存活最大时间，默认600000（10分钟）
      idle-timeout: 180000
      # 连接池最大连接数，默认是10
      maximum-pool-size: 5
      # 此属性控制从池返回的连接的默认自动提交行为,默认值：true
      auto-commit: true
      # 连接池名称
      pool-name: MyHikariCP
      # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟
      max-lifetime: 1800000
      # 数据库连接超时时间,默认30秒，即30000
      connection-timeout: 30000
      connection-test-query: SELECT 1
    druid:
      initial-size: 5
      min-idle: 5
      maxActive: 10
      maxWait: 60000
      timeBetweenEvictionRunsMillis: 60000
      minEvictableIdleTimeMillis: 300000
      #      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
  #      poolPreparedStatements: true
  #      maxPoolPreparedStatementPerConnectionSize: 20
  #      filters: stat,wall,log4j
  #      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  #      useGlobalDataSourceStat: true
  #    platform: mysql
  #    continue-on-error: true
  redis:
    host: redis
    password: ENC(svOoGRZ5qlC1bRGGh+7YwA==)
    # 连接超时时间（毫秒）
    timeout: 10s
    lettuce:
      # 连接池最大阻塞等待时间 毫秒（使用负值表示没有限制） 默认 -1
      max-active: 3
      # 连接池最大连接数（使用负值表示没有限制） 默认 8
      max-wait: -1
      # 连接池中的最大空闲连接 默认 8
      max-idle: 1
      # 连接池中的最小空闲连接 默认 0
      min-idle: 1
  cloud:
    stream:
      default:
        group: ${spring.application.name}-${spring.cloud.client.ip-address}-${server.port}
      rabbit:
        bindings:
          springCloudBusInput:
            consumer:
              # 队列声明重试次数
              queue-declaration-retries: 2000
              # 重试间隔(ms)
              recovery-interval: 5000
              # 为true时，使用‘group’作为配置刷新队列的名称
              queue-name-group-only: true
  jpa:
    #Hibernate自动创建表的时候使用InnoDB存储引擎，不然就会以默认存储引擎MyISAM来建表，而MyISAM存储引擎是没有事务的。
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    open-in-view: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
    #show-sql: true
  #    hibernate:
  #      ddl-auto: update
  zipkin:
    message-timeout: 10
    #    baseUrl: http://zipkin:9411/
    sender:
      type: rabbit
    rabbitmq:
      queue: zipkin
  #    locator:
  #      discovery:
  #        enabled: true
  #    discovery-client-enabled: true
  sleuth:
    #    enabled: false
    sampler:
      probability: 1.0
  #    feign:
  #      enabled: false
  #      processor:
  #        enabled: false
  jackson:
    #日期格式化
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
    # serialization:
    #    #格式化输出
    #   indent_output: true
    #   #忽略无法转换的对象
    #   fail_on_empty_beans: false
    # #设置空如何序列化
    # defaultPropertyInclusion: NON_EMPTY
    # deserialization:
    #   #允许对象忽略json中不存在的属性
    #   fail_on_unknown_properties: false
    # parser:
    #   #允许出现特殊字符和转义符
    #   allow_unquoted_control_chars: true
    #   #允许出现单引号
    #   allow_single_quotes: true
  oauth2:
    client:
      registration:
        anan-authserver:
          client-id: appServer
          client-secret: appServer
          provider: anan-authserver
      provider:
        anan-authserver:
          authorization-uri: http://anan-authserver:51400/oauth2/authorize
          token-uri: http://anan-authserver:51400/oauth2/token
          user-info-uri: http://anan-authserver:51400/oauth2/userinfo/jwt
          jwk-set-uri: http://anan-authserver:51400/oauth2/token_key
server:
  servlet:
    session:
      cookie:
        # This is to prevent cookie clash with other service as they run on the same host and context path
        name: ${spring.application.name}
  undertow:
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
      # 不要设置过大，如果过大，启动项目会报错：打开文件数过多
      io: 4
      # 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程
      # 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
      worker: 4
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可
    buffer-size: 1024
    direct-buffers: true
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    shutdown:
      enabled: true
    health:
      show-details: ALWAYS
  metrics:
    web:
      server:
        request:
          autotime:
            enabled: false
anan:
  datasource:
    url: jdbc:mysql://mysql-leader:3306/anan_platform?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2b8
    username: anan
    password: ENC(svOoGRZ5qlC1bRGGh+7YwA==)
  security:
    jwt:
      key-store: ${encrypt.key-store.location}
      key-alias: ${encrypt.key-store.alias}
      key-password: ${encrypt.key-store.password}
      key-store-password: ${encrypt.key-store.secret}
      public-key-location: classpath:anan.pub
  oauth2:
    client:
      client-id: appServer
      client-secret: appServer
      access-token-uri: http://anan-authserver:51400/oauth/token
security:
  oauth2:
    resource:
      loadBalanced: true
      user-info-uri: http://anan-authserver/oauth/userinfo/principal
      prefer-token-info: false
eureka:
  client:
    healthcheck:
      # 开启健康检查（需要spring-boot-starter-actuator依赖）
      enabled: true
  instance:
    #续约到期时间（默认90秒）
    lease-expiration-duration-in-seconds: 10
    #续约更新时间间隔（默认30秒）
    lease-renewal-interval-in-seconds: 5

# feign:
#  compression:
#    request:
#      enabled: true
#    #Feign request compression gives you settings similar to what you may set for your web server:
#      mime-types: text/xml,application/xml,application/json
#      min-request-size: 2048
#    response:
#      enabled: true
#    #For http clients except OkHttpClient, default gzip decoder can be
#    # enabled to decode gzip response in UTF-8 encoding:
#      useGzipDecoder: true
# circuitbreaker:
#   enabled: true
# okhttp:
#   enabled: true
#httpclient:
#  enabled: false
#    max-connections: 1000 #最大连接数
#    max-connections-per-route: 100 #每个url的连接数
#  client:
#    config:
#      anan-platformserver:
#        connectTimeout: 5000
#        readTimeout: 5000
#        loggerLevel: full
#        errorDecoder: com.example.SimpleErrorDecoder
#        retryer: com.example.SimpleRetryer
#        defaultQueryParameters:
#          query: queryValue
#        defaultRequestHeaders:
#          header: headerValue
#        requestInterceptors:
#          - com.example.FooRequestInterceptor
#          - com.example.BarRequestInterceptor
#        decode404: false
#        encoder: com.example.SimpleEncoder
#        decoder: com.example.SimpleDecoder
#        contract: com.example.SimpleContract
#        capabilities:
#          - com.example.FooCapability
#          - com.example.BarCapability
        #        metrics.enabled: false
