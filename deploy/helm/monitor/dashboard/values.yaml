deployment:
  strategy:
    rollingUpdate:  ##由于replicas为2,则整个升级,pod个数在2-3个之间
      maxSurge: 1      #滚动升级时会先启动1个pod
      maxUnavailable: 1 #滚动升级时允许的最大Unavailable的pod个数
  minReadySeconds: 60  #滚动升级时60s后认为该pod就绪
  replicaCount: 1
revisionHistoryLimit: 10
containers:
  - image: kubernetesui/dashboard:v2.0.0
    imagePullPolicy: IfNotPresent
    resources:
      limits:
        memory: 512Mi
      requests:
        memory: 256Mi
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsUser: 1001
      runAsGroup: 2001
    livenessProbe:
      httpGet:
        scheme: HTTPS
        path: /
        port: http
      initialDelaySeconds: 60
      periodSeconds: 15
      timeoutSeconds: 30
    readinessProbe:
      httpGet:
        scheme: HTTPS
        path: /
        port: http
      initialDelaySeconds: 30
      periodSeconds: 15
      timeoutSeconds: 30
    args:
      - --auto-generate-certificates
      - --namespace=default
    # Uncomment the following line to manually specify Kubernetes API server Host
    # If not specified, Dashboard will attempt to auto discover the API server and connect
    # to it. Uncomment only if the default does not work.
    # - --apiserver-host=http://my-address:port
    volumeMounts:
      - name: kubernetes-dashboard-certs
        mountPath: /certs
      # Create on-disk volume to store exec logs
      - mountPath: /tmp
        name: tmp-volume
service:
  type: NodePort
  ports:
    - port: 8443
      name: http
terminationGracePeriodSeconds: 30 #优雅关闭pod的等待时间，默认30s
volumes:
  - name: kubernetes-dashboard-certs
    secret:
      secretName: kubernetes-dashboard-certs
  - name: tmp-volume
    emptyDir: {}
role:
  rules:
    # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
    - apiGroups: [""]
      resources: ["secrets"]
      resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs", "kubernetes-dashboard-csrf"]
      verbs: ["get", "update", "delete"]
      # Allow Dashboard to get and update 'k8s-dashboard-settings' config map.
    - apiGroups: [""]
      resources: ["configmaps"]
      resourceNames: ["k8s-dashboard-settings"]
      verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
    - apiGroups: [""]
      resources: ["services"]
      resourceNames: ["heapster", "dashboard-metrics-scraper"]
      verbs: ["proxy"]
    - apiGroups: [""]
      resources: ["services/proxy"]
      resourceNames: ["heapster", "http:heapster:", "https:heapster:","dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
      verbs: ["get"]
cluster:
  role:
    rules:
      # Allow Metrics Scraper to get metrics from the Metrics server
      - apiGroups: ["metrics.k8s.io"]
        resources: ["pods", "nodes"]
        verbs: ["get", "list", "watch"]
