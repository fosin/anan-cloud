apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "anan.configmap.name" . }}
  namespace: {{ .Release.Namespace }}
data:
  {{- $headlessName := (include "anan.service.headless.name" .) }}
  username: elastic
  serviceHeadless: {{ $headlessName | quote }}
  port: {{ index (index .Values.service.ports 0) "port" | quote }}
  portTransport: {{ index (index .Values.service.ports 1) "port" | quote }}
  addresses: {{ include "anan.service.name" . }}:{{ index (index .Values.service.ports 0) "port" }}
  hosts: {{ "http://" }}{{ include "anan.service.name" . }}:{{ index (index .Values.service.ports 0) "port" }}
  elasticsearch.yml: |-
    #这允许JVM锁定其使用的内存，而避免被放入操作系统交换区(k8s环境中禁用了swap)
    bootstrap.memory_lock: false
    network.host: 0.0.0.0

    #禁用X-Pack机器学习功能
    xpack.ml.enabled: false

    #开启X-Pack安全功能
    #xpack.security.enabled: true
    #xpack.security.transport.ssl.enabled: true
    #xpack.security.transport.ssl.verification_mode: certificate
    #xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/data/elastic-ca.p12
    #xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/data/elastic-ca.p12

    #节点加入集群的必要条件，节点还需要单播或组播方式加入集群
    cluster.name: anan
    #节点名称
    node.name: ${MY_POD_NAME}

    # 配置文件中给出了三种配置高性能集群拓扑结构的模式,如下：
    # 1. 如果你想让节点从不选举为主节点,只用来存储数据,可作为负载器。在集群中，需要单独设置几个这样的节点只负责存储、查询、聚合数据。
    # node.master: false
    # node.data: true
    # node.ingest: false

    # 2. 如果想让节点成为主节点,且不存储任何数据,并保有空闲资源,可作为协调器
    # node.master: true
    # node.data: false
    # node.ingest: false

    # 3. 如果想让节点既不称为主节点,又不成为数据节点,那么可将他作为搜索器,从节点中获取数据,生成搜索结果等
    # node.master: false
    # node.data: false
    # node.ingest: true (可不指定，默认为开启)

    # 4. 仅作为协调器
    # node.master: false
    # node.data: false
    # node.ingest: false

    # 5. 既有成为主节点的资格，又可以存储数据，还可以作为预处理节点（不建议这样，节点压力太大）
    node.master: true
    node.data: true
    node.ingest: true

    #选举主节点时需要看到最少多少个具有master资格的活节点，才能进行选举
    #discovery.zen.minimum_master_nodes: 2

    #其他节点ping主节点多久时间没有响应就认为主节点不可用了（默认值是3秒）
    discovery.zen.ping_timeout: 10s

    #配置单播发现的主节点ip地址，其他从节点要加入进来，就得去询问单播发现机制里面配置的主节点我要加入到集群里面了
    #主节点同意以后才能加入，然后主节点再通知集群中的其他节点有新节点加入
    #discovery.zen.ping.unicast.hosts:
    {{- $replicaCount := int .Values.statefulset.replicaCount }}
    {{- $clusterPort := (index (index .Values.service.ports 1) "port") }}
    {{- range $i, $e := until $replicaCount -}}
    {{- if eq $i 0 -}}
    {{- indent 1 "[\"" }}{{ $.Release.Name }}-{{ $i }}.{{ $headlessName }}.{{ $.Release.Namespace }}.svc.cluster.local:{{- $clusterPort -}}{{- "\"" }}
    {{- else -}}
    {{- ", \"" }}{{ $.Release.Name }}-{{ $i }}.{{ $headlessName }}.{{ $.Release.Namespace }}.svc.cluster.local:{{- $clusterPort -}}{{- "\"" }}
    {{- end }}
    {{- end }}{{- "]" }}

    # 设置索引的分片数,默认为 5
    # index.number_of_shards: 5

    # 设置索引的副本数,默认为 1:
    # index.number_of_replicas: 1

    # 使用Chrome 插件方式（不能使用）
    #http.port: 9200
    #http.cors.allow-origin: 'chrome-extension://jopjeaiilkcibeohjdmejhoifenbnmlh'
    #http.cors.enabled: true
    #http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
    #http.cors.allow-credentials: true

    # 使用Docker容器
    http.port: 9200
    http.cors.allow-origin: '*'
    http.cors.enabled: true
    http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
    http.cors.allow-credentials: true

    # 自动创建zipkin索引
    #action.auto_create_index: +zipkin*,+filebeat*
