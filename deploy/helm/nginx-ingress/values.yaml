ingressClass:
  default: true
  controller: "nginx.org/ingress-controller"
ingress:
  annotations:
    nginx.org/proxy-hide-headers: "Server"
    nginx.org/rewrites: "serviceName=rabbitmq rewrite=/"
    nginx.org/location-snippets: |
      opentracing_propagate_context;
    #设置nginx的server配置
    nginx.org/server-snippets: |
      opentracing off;
      opentracing_operation_name $uri;
      ssl_session_timeout 5m;
      ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
      ssl_ciphers HIGH:!ADH:!EXPORT56:RC4+RSA:+MEDIUM;
      error_page 500 501 502 503 504 /50x.html;

      location = /50x.html {
        root /usr/share/nginx/html;
      }
      location /anan-vue/ {
        root /usr/share/nginx/html;
        index index.html;
      }
      location = / {
        return 301 https://$http_host/anan-vue/;
      }

      location /redisinsight/ {
        proxy_pass http://redisinsight:8001/;
        proxy_hide_header X-Frame-Options;
        sub_filter_once off;
        sub_filter_types *;
        sub_filter /static/ /redisinsight/static/;
        sub_filter /api/ /redisinsight/api/;
      }
  tls:
    - secretName: fosin.top
      hosts:
        - www.fosin.top
  rules:
    - host: www.fosin.top
      http:
        paths:
          - path: /sba/
            pathType: Prefix
            backend:
              service:
                name: anan-sbaserver
                port:
                  number: 51700
          - path: /gateway/
            pathType: Prefix
            backend:
              service:
                name: anan-cloudgateway
                port:
                  number: 51900
          - path: /rabbitmq/
            pathType: Prefix
            backend:
              service:
                name: rabbitmq
                port:
                  number: 15672
daemonset:
  strategy:
    rollingUpdate:
      maxUnavailable: 1 #滚动升级时允许的最大Unavailable的pod个数
  minReadySeconds: 60  #滚动升级时60s后认为该pod就绪
terminationGracePeriodSeconds: 15 #优雅关闭pod的等待时间，默认30s
containers:
  - image: registry.cn-hongkong.aliyuncs.com/fosin/nginx-ingress-controller:3.5.0
    imagePullPolicy: Always
    resources:
      limits:
        memory: 128Mi
      requests:
        cpu: 1m
        memory: 64Mi
    env:
      - name: TZ
        value: Asia/Shanghai
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: HELM_RELEASE_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.labels['anan-templates-release']
    args:
      - -enable-snippets=true
      - -nginx-plus=false
      - -nginx-reload-timeout=60000
      - -enable-app-protect=false
      - -enable-app-protect-dos=false
      - -nginx-configmaps=$(POD_NAMESPACE)/$(HELM_RELEASE_NAME)
      - -ingress-class=$(HELM_RELEASE_NAME)
      - -nginx-debug=true
      - -v=1
      - -enable-prometheus-metrics=true
      - -prometheus-metrics-listen-port=9113
      - -health-status=true
      - -health-status-uri=/nginx-health
      - -ready-status=true
      - -ready-status-port=8081
      - -enable-latency-metrics=false
      - -enable-custom-resources=false
    startupProbe:
      periodSeconds: 5
      failureThreshold: 10
      httpGet:
        path: /nginx-ready
        port: ready-status
    readinessProbe:
      periodSeconds: 60
      failureThreshold: 2
      httpGet:
        path: /nginx-ready
        port: ready-status
    livenessProbe:
      periodSeconds: 60
      failureThreshold: 2
      httpGet:
        path: /nginx-health
        port: http
    lifecycle:
      preStop:
        exec:
          command: ["/usr/sbin/nginx", "-s", "quit"]
    securityContext:
      allowPrivilegeEscalation: true
      runAsUser: 101 #nginx
      capabilities:
        drop:
        - ALL
        add:
        - NET_BIND_SERVICE
service:
  type: NodePort
  ports:
    - port: 80
      name: http
    - port: 443
      name: https
    - port: 8081
      name: ready-status
    - port: 9113
      name: prometheus
configmap:
  confs:
    # error-log-level: debug
    # opentracing: "true"
    opentracing-tracer: /usr/local/lib/libzipkin_opentracing_plugin.so
    #自定义日志格式
    #log-format: '$remote_addr - $remote_user [$time_local] "$request" $status $grpc_status $body_bytes_sent "$http_referer"  "$http_user_agent" "$http_x_forwarded_for" "$resource_name" "$resource_type" "$resource_namespace" "$service"'
    #开启允许自定义header
    #enable-underscores-in-headers: "true"
  files:
  - mountPath: /etc/nginx/
    mountFiles:
      opentracing-tracer-config: |
        {
          "service_name": "anan-nginx-ingress",
          "service_address": "$(HELM_RELEASE_NAME)",
          "collector_host": "zipkin",
          "collector_port": 9411,
          "sample_rate": 1.0
        }
  - mountPath: /
    mountFiles:
      nginx.ingress.tmpl: |
        # configuration for {{.Ingress.Namespace}}/{{.Ingress.Name}}
        {{range $upstream := .Upstreams}}
        upstream {{$upstream.Name}} {
          {{if ne $upstream.UpstreamZoneSize "0"}}zone {{$upstream.Name}} {{$upstream.UpstreamZoneSize}};{{end}}
          {{if $upstream.LBMethod }}{{$upstream.LBMethod}};{{end}}
          {{range $server := $upstream.UpstreamServers}}
          server {{$server.Address}}:{{$server.Port}} max_fails={{$server.MaxFails}} fail_timeout={{$server.FailTimeout}} max_conns={{$server.MaxConns}};{{end}}
          {{if $.Keepalive}}keepalive {{$.Keepalive}};{{end}}
        }{{end}}

        {{range $server := .Servers}}
        server {
          {{if not $server.GRPCOnly}}
          {{range $port := $server.Ports}}
          listen {{$port}}{{if $server.ProxyProtocol}} proxy_protocol{{end}};
          {{- end}}
          {{end}}

          {{if $server.SSL}}
          {{if $server.TLSPassthrough}}
          listen unix:/var/lib/nginx/passthrough-https.sock ssl{{if $server.HTTP2}} http2{{end}} proxy_protocol;
          set_real_ip_from unix:;
          real_ip_header proxy_protocol;
          {{else}}
          {{- range $port := $server.SSLPorts}}
          listen {{$port}} ssl{{if $server.HTTP2}} http2{{end}}{{if $server.ProxyProtocol}} proxy_protocol{{end}};
          {{- end}}
          {{end}}
          {{if $server.SSLRejectHandshake}}
          ssl_reject_handshake on;
          {{else}}
          ssl_certificate {{$server.SSLCertificate}};
          ssl_certificate_key {{$server.SSLCertificateKey}};
          {{end}}
          {{end}}

          {{range $setRealIPFrom := $server.SetRealIPFrom}}
          set_real_ip_from {{$setRealIPFrom}};{{end}}
          {{if $server.RealIPHeader}}real_ip_header {{$server.RealIPHeader}};{{end}}
          {{if $server.RealIPRecursive}}real_ip_recursive on;{{end}}

          server_tokens {{$server.ServerTokens}};

          server_name {{$server.Name}};

          set $resource_type "ingress";
          set $resource_name "{{$.Ingress.Name}}";
          set $resource_namespace "{{$.Ingress.Namespace}}";

          {{range $proxyHideHeader := $server.ProxyHideHeaders}}
          proxy_hide_header {{$proxyHideHeader}};{{end}}
          {{range $proxyPassHeader := $server.ProxyPassHeaders}}
          proxy_pass_header {{$proxyPassHeader}};{{end}}

          {{- if and $server.HSTS (or $server.SSL $server.HSTSBehindProxy)}}
          set $hsts_header_val "";
          proxy_hide_header Strict-Transport-Security;
          {{- if $server.HSTSBehindProxy}}
          if ($http_x_forwarded_proto = 'https') {
          {{else}}
          if ($https = on) {
          {{- end}}
            set $hsts_header_val "max-age={{$server.HSTSMaxAge}}; {{if $server.HSTSIncludeSubdomains}}includeSubDomains; {{end}}preload";
          }

          add_header Strict-Transport-Security "$hsts_header_val" always;
          {{end}}

          {{if $server.SSL}}
          {{if not $server.GRPCOnly}}
          {{- if $server.SSLRedirect}}
          if ($scheme = http) {
            return 301 https://$host:{{index $server.SSLPorts 0}}$request_uri;
          }
          {{- end}}
          {{end}}
          {{- end}}

          {{- if $server.RedirectToHTTPS}}
          if ($http_x_forwarded_proto = 'http') {
            return 301 https://$host$request_uri;
          }
          {{- end}}

          {{- if $server.ServerSnippets}}
          {{range $value := $server.ServerSnippets}}
          {{$value}}{{end}}
          {{- end}}

          {{range $location := $server.Locations}}
          location {{$location.Path}} {
            set $service "{{$location.ServiceName}}";
            {{with $location.MinionIngress}}
            # location for minion {{$location.MinionIngress.Namespace}}/{{$location.MinionIngress.Name}}
            set $resource_name "{{$location.MinionIngress.Name}}";
            set $resource_namespace "{{$location.MinionIngress.Namespace}}";
            {{end}}
            {{if $location.GRPC}}
            {{if not $server.GRPCOnly}}
            error_page 400 @grpcerror400;
            error_page 401 @grpcerror401;
            error_page 403 @grpcerror403;
            error_page 404 @grpcerror404;
            error_page 405 @grpcerror405;
            error_page 408 @grpcerror408;
            error_page 414 @grpcerror414;
            error_page 426 @grpcerror426;
            error_page 500 @grpcerror500;
            error_page 501 @grpcerror501;
            error_page 502 @grpcerror502;
            error_page 503 @grpcerror503;
            error_page 504 @grpcerror504;
            {{end}}

            {{- if $location.LocationSnippets}}
            {{range $value := $location.LocationSnippets}}
            {{$value}}{{end}}
            {{- end}}

            grpc_connect_timeout {{$location.ProxyConnectTimeout}};
            grpc_read_timeout {{$location.ProxyReadTimeout}};
            grpc_send_timeout {{$location.ProxySendTimeout}};
            grpc_set_header Host $host;
            grpc_set_header X-Real-IP $remote_addr;
            grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            grpc_set_header X-Forwarded-Host $host;
            grpc_set_header X-Forwarded-Port $server_port;
            grpc_set_header X-Forwarded-Proto {{if $server.RedirectToHTTPS}}https{{else}}$scheme{{end}};

            {{- if $location.ProxyBufferSize}}
            grpc_buffer_size {{$location.ProxyBufferSize}};
            {{- end}}
            {{if $location.SSL}}
            grpc_pass grpcs://{{$location.Upstream.Name}}{{$location.Rewrite}};
            {{else}}
            grpc_pass grpc://{{$location.Upstream.Name}}{{$location.Rewrite}};
            {{end}}
            {{else}}
            proxy_http_version 1.1;
            {{if $location.Websocket}}
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            {{- else}}
            {{- if $.Keepalive}}proxy_set_header Connection "";{{end}}
            {{- end}}

            {{- if $location.LocationSnippets}}
            {{range $value := $location.LocationSnippets}}
            {{$value}}{{end}}
            {{- end}}

            proxy_connect_timeout {{$location.ProxyConnectTimeout}};
            proxy_read_timeout {{$location.ProxyReadTimeout}};
            proxy_send_timeout {{$location.ProxySendTimeout}};
            client_max_body_size {{$location.ClientMaxBodySize}};
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header X-Forwarded-Proto {{if $server.RedirectToHTTPS}}https{{else}}$scheme{{end}};
            proxy_buffering {{if $location.ProxyBuffering}}on{{else}}off{{end}};

            {{- if $location.ProxyBuffers}}
            proxy_buffers {{$location.ProxyBuffers}};
            {{- end}}
            {{- if $location.ProxyBufferSize}}
            proxy_buffer_size {{$location.ProxyBufferSize}};
            {{- end}}
            {{- if $location.ProxyMaxTempFileSize}}
            proxy_max_temp_file_size {{$location.ProxyMaxTempFileSize}};
            {{- end}}
            {{if $location.SSL}}
            proxy_pass https://{{$location.Upstream.Name}}{{$location.Rewrite}};
            {{else}}
            proxy_pass http://{{$location.Upstream.Name}}{{$location.Rewrite}};
            {{end}}
            {{end}}
          }{{end}}
          {{if $server.GRPCOnly}}
          error_page 400 @grpcerror400;
          error_page 401 @grpcerror401;
          error_page 403 @grpcerror403;
          error_page 404 @grpcerror404;
          error_page 405 @grpcerror405;
          error_page 408 @grpcerror408;
          error_page 414 @grpcerror414;
          error_page 426 @grpcerror426;
          error_page 500 @grpcerror500;
          error_page 501 @grpcerror501;
          error_page 502 @grpcerror502;
          error_page 503 @grpcerror503;
          error_page 504 @grpcerror504;
          {{end}}
          {{if $server.HTTP2}}
          location @grpcerror400 { default_type application/grpc; return 400 "\n"; }
          location @grpcerror401 { default_type application/grpc; return 401 "\n"; }
          location @grpcerror403 { default_type application/grpc; return 403 "\n"; }
          location @grpcerror404 { default_type application/grpc; return 404 "\n"; }
          location @grpcerror405 { default_type application/grpc; return 405 "\n"; }
          location @grpcerror408 { default_type application/grpc; return 408 "\n"; }
          location @grpcerror414 { default_type application/grpc; return 414 "\n"; }
          location @grpcerror426 { default_type application/grpc; return 426 "\n"; }
          location @grpcerror500 { default_type application/grpc; return 500 "\n"; }
          location @grpcerror501 { default_type application/grpc; return 501 "\n"; }
          location @grpcerror502 { default_type application/grpc; return 502 "\n"; }
          location @grpcerror503 { default_type application/grpc; return 503 "\n"; }
          location @grpcerror504 { default_type application/grpc; return 504 "\n"; }
          {{end}}
        }{{end}}

cluster:
  role:
    rules:
      - apiGroups:
        - ""
        resources:
        - services
        - endpoints
        - secrets
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - configmaps
        verbs:
        - get
        - list
        - watch
        - update
        - create
      - apiGroups:
        - ""
        resources:
        - pods
        verbs:
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - events
        verbs:
        - create
        - patch
        - list
      - apiGroups:
        - networking.k8s.io
        resources:
        - ingresses
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - networking.k8s.io
        resources:
        - ingressclasses
        verbs:
        - get
      - apiGroups:
        - networking.k8s.io
        resources:
        - ingresses/status
        verbs:
        - update
      - apiGroups:
        - k8s.nginx.org
        resources:
        - virtualservers
        - virtualserverroutes
        - globalconfigurations
        - transportservers
        - policies
        verbs:
        - list
        - watch
        - get
      - apiGroups:
        - k8s.nginx.org
        resources:
        - virtualservers/status
        - virtualserverroutes/status
        - policies/status
        - transportservers/status
        verbs:
        - update
