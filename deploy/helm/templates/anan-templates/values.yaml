#第1优先级
statefulset:
  apiVersion: apps/v1
  podManagementPolicy: Parallel #并行创建pod,默认为按顺序执行OrderedReady
  labels: {}
  annotations: {}
  replicaCount: 3
  serviceName: "" #服务名称，默认是headless无头服务
  volumeClaimTemplates: []
  updateStrategy:
    type: RollingUpdate #支持OnDelete、RollingUpdate
    rollingUpdate:
      partition: 0 #保留的旧版本的个数，取值是0 <= N < replicaCount，一般用于灰度更新
#第2优先级
deployment:
  apiVersion: apps/v1
  labels: {}
  annotations: {}
  strategy:
    type: RollingUpdate #Recreate、RollingUpdate
    rollingUpdate:  #如果replicas为2,则整个升级,pod个数在2-3个之间
      maxSurge: 1      #滚动升级时会先启动1个pod
      maxUnavailable: 1 #滚动升级时允许的最大Unavailable的pod个数
  replicaCount: 2
  minReadySeconds: 60  #滚动升级时60s后认为该pod就绪
#第3优先级
daemonset:
  apiVersion: apps/v1
  labels: {}
  annotations: {}
  updateStrategy:
    type: RollingUpdate #支持OnDelete、RollingUpdate
    rollingUpdate:
      maxUnavailable: 1 #滚动升级时允许的最大Unavailable的pod个数
  minReadySeconds: 60  #滚动升级时60s后认为该pod就绪
#Job任务
job:
  apiVersion: batch/v1
  labels: {}
  annotations: {}
  parallelism: 1 #并行执行的Pod个数
  completions: 16 #指定每个Pod队列执行次数
  backoffLimit: 3 #失败重试次数限制
  activeDeadlineSeconds: #该值适用于 Job 的整个生命期，无论 Job 创建了多少个 Pod。 一旦 Job 运行时间达到 activeDeadlineSeconds 秒，其所有运行中的 Pod 都会被终止，并且 Job 的状态更新为 type: Failed 及 reason: DeadlineExceeded。
  manualSelector: #不使用系统通常自动为你 生成的选择算符，使用自定义选择器
  ttlSecondsAfterFinished: 100 #可以让该控制器清理掉 已结束的资源
#CronJob定时任务
cronjob:
  apiVersion: batch/v1beta1
  labels: {}
  annotations: {}
  schedule: "*/1 * * * *" #设置时间格式，它的时间格式和 Linux 的 crontime 是一样的，所以直接根据 Linux 的 crontime 书写格式来书写就可以了。
  startingDeadlineSeconds: 15 #每次运行 Job 的时候，它最长可以等多长时间，不能小于10，
  concurrencyPolicy: Allow #否允许并行运行,可选值Allow默认：schedule时间到了就新增任务、Forbid：接着上一个任务执行、Replace：取消上一个任务新增一个新任务执行。所谓的并行运行就是，比如说我每分钟执行一次，但是这个 Job 可能运行的时间特别长，假如两分钟才能运行成功，也就是第二个 Job 要到时间需要去运行的时候，上一个 Job 还没完成。如果这个 policy 设置为 true 的话，那么不管你前面的 Job 是否运行完成，每分钟都会去执行；如果是 false，它就会等上一个 Job 运行完成之后才会运行下一个；
  successfulJobsHistoryLimit: 100 #每一次 CronJob 运行完之后，它都会遗留上一个 Job 的运行历史、查看时间。
  failedJobsHistoryLimit: 3 #失败运行历史、查看时间。
  #以下设置就是Job的设置
  parallelism: 1 #并行执行的Pod个数
  completions: 16 #指定每个Pod队列执行次数
  backoffLimit: 3 #失败重试次数限制
  activeDeadlineSeconds: #该值适用于 Job 的整个生命期，无论 Job 创建了多少个 Pod。 一旦 Job 运行时间达到 activeDeadlineSeconds 秒，其所有运行中的 Pod 都会被终止，并且 Job 的状态更新为 type: Failed 及 reason: DeadlineExceeded。
  manualSelector: #不使用系统通常自动为你 生成的选择算符，使用自定义选择器
  ttlSecondsAfterFinished: 100 #可以让该控制器清理掉 已结束的资源

revisionHistoryLimit: 10 #保留的历史版本个数
terminationGracePeriodSeconds: 30 #优雅关闭pod的等待时间，默认30s
nodeName: "" #调度到的主机的名称
nodeSelector: {} #调度到某节点的选择器
hostNetwork: false #使用主机网络
hostIPC: false # Use the host's ipc namespace. Optional: Default to false.
hostPID: false #Use the host's pid namespace. Optional: Default to false.
hostname: "" #Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
restartPolicy: Always #Pod重启策略：Always、OnFailure 和 Never。默认值是 Always。
imagePullSecrets: ""
initContainers: []
containers:
  - name: name
    image: busybox
    imagePullPolicy: Always #Always, Never, IfNotPresent. Defaults to Always
    workingDir: ""
    resources: {}
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    securityContext: {}
    lifecycle: {}
    env: []
    envFrom: []
    args: []
    command: []
    ports:
      - name: http
        containerPort: 80
      - name: https
        containerPort: 443
    volumeDevices: []
    volumeMounts: []
volumes: []
affinity: {}
#required = requiredDuringSchedulingIgnoredDuringExecution： 硬要求，必须满足，否则不执行调度
#preferred = preferredDuringSchedulingIgnoredDuringExecution：软要求，尽量满足，不满足退而求其次
podAntiAffinity:
  duringScheduling: preferred #非required就是preferredDuringSchedulingIgnoredDuringExecution
  key: anan-templates-release
  operator: In
  value: exam
  topologyKey: "kubernetes.io/hostname"
podAffinity:
  duringScheduling: required #required就是requiredDuringSchedulingIgnoredDuringExecution
  key: anan-templates-release
  operator: In
  value: exam
  topologyKey: "kubernetes.io/hostname"
nodeAntiAffinity:
  duringScheduling: preferred #与pod亲和性对应属性等同
  key: "kubernetes.io/hostname"
  operator: In
  value: exam
nodeAffinity:
  duringScheduling: required #与pod亲和性对应属性等同
  key: "kubernetes.io/hostname"
  operator: In
  value: exam
tolerations: []
persistence:
  # 网络存储(NFS)
  # name必填
  - name: nfs
    apiVersion: v1
    # labels可以为空，默认是{{ $.Release.Name }}-{{ name }}-{{ nfs的数组元素编号 }}
    labels: {}
    # 容量大小，必填
    size: 1G
    # 不填系统默认
    accessMode: ReadWriteOnce
    # 如果不设置默认是空
    storageClassName: ""
    # 不填系统默认
    persistentVolumeReclaimPolicy: Retain
    # 挂载目录，必填
    mountPath: /data
    # NFS的地址和目录，必填
    nfs:
      - server: 127.0.0.1
        path: "/data/nfs"
        readOnly: false
  #本地持久化存储(Local Persistent Volume)
  # name必填
  - name: lpv
    apiVersion: v1
    # labels可以为空，默认是{{ $.Release.Name }}-{{ name }}-{{ lpv的数组元素编号 }}
    labels: {}
    # 容量大小，必填
    size: 1G
    # 不填系统默认
    accessMode: ReadWriteOnce
    # 需要手动指定：local-storage
    storageClassName: local-storage
    # 不填系统默认
    persistentVolumeReclaimPolicy: Retain
    # 容器内的挂载目录，必填
    mountPath: /data
    # 主机本地目录，必填
    local:
      - hostname: hostname-0 #指定主机名（必填）
        path: /data #文件目录或块设备、磁盘分区（必填）
        fsType: "xfs" #文件系统类型，例如"ext4", "xfs", "ntfs"等，如果不指定则默认自动选择。
      - hostname: hostname-1
        path: /data2
        fsType: "xfs"
hostPath:
  - name: root #volume名称
    mountPath: /rootfs #挂载到容器的目录，必填
    path: /  #主机目录，必填
    # DirectoryOrCreate如果在给定路径上什么都不存在，那么将根据需要创建空目录，权限设置为 0755，具有与 kubelet 相同的组和属主信息。
    #Directory在给定路径上必须存在的目录。
    #FileOrCreate如果在给定路径上什么都不存在，那么将在那里根据需要创建空文件，权限设置为 0644，具有与 kubelet 相同的组和所有权。
    #File在给定路径上必须存在的文件。
    #Socket在给定路径上必须存在的 UNIX 套接字。
    #CharDevice在给定路径上必须存在的字符设备。
    #BlockDevice在给定路径上必须存在的块设备。
    type: DirectoryOrCreate
    readOnly: false
    subPath: ""
emptyDir:
  - /data #挂载目录
#指定PVC名称和挂载目录
pvc:
  - name: pvc
    mountPath: /data
configmap: #创建cm并挂载到pod指定目录的依据
  - name: "nginx" #cm的名称，如果不设置，默认是模版anan.configmap.name定义的名称,并支持按name合并创建一个cm
    existName: "nginx" #现存的cm的名称，如果想挂载现有的cm，可以使用该属性。一旦设置该属性，将不会创建新的cm

    #挂载pod的设置
    mountPath: / #1、挂载目录，如果为空，这不会生成volumes、volumeMounts的信息。2、非/路径（例如/data/），如果以/结尾则会使用subPath属性
    readOnly: true
    defaultMode: "0755"

    #以下是cm的相关设置
    apiVersion: v1
    annotations: {}
    labels: {}
    fromMap: #从键值对配置创建
      a: 1
      b: 2
    fromFiles: #从指定目录及文件创建cm，优先级1
      application.yml: "conf/application.yaml" #cm的key名称：文件路径+名称
      application.properties: "application.properties" #cm的key名称：文件路径+名称
    fromTemps: #从模版创建cm，优先级2
      nginx.conf: |-
        a=1
        b=2
    fromDirs: #从指定目录中创建secret，文件名就是secret的key名称,优先级3
      - "**.yaml"
      - "conf/**.yaml"
secret:
  - name: "nginx" #secret的名称，如果不设置，默认是模版anan.secret.name定义的名称,并支持按name合并创建一个secret
    existName: "nginx" #现存的secret的名称，如果想挂载现有的secret，可以使用该属性。注意：一旦设置该属性，将不会创建新的secret

    #挂载pod的设置
    mountPath: / #挂载目录，如果为空，不会自动生成volumes、volumeMounts的信息
    readOnly: true
    defaultMode: "0755"
    optional: false

    apiVersion: v1
    base64: true #是否base64加密，true：使用data属性，false：使用stringData属性
    labels: {}
    annotations: {}
    #Opaque：用户定义的任意数据,默认值
    #kubernetes.io/service-account-token：服务账号令牌
    #kubernetes.io/dockercfg：文件~/.dockercfg的序列化形式
    #kubernetes.io/dockerconfigjson：文件~/.docker/config.json的序列化形式
    #kubernetes.io/basic-auth：用于基本身份认证的凭据
    #kubernetes.io/ssh-auth：用于 SSH 身份认证的凭据
    #kubernetes.io/tls：用于 TLS 客户端或者服务器端的数据
    #bootstrap.kubernetes.io/token：启动引导令牌数据
    type: Opaque
    fromMap: #从键值对配置创建
      a: 1
      b: 2
    fromFiles: #从指定目录及文件创建cm，优先级1
      application.yml: "conf/application.yaml" #cm的key名称：文件路径+名称
      application.properties: "application.properties" #cm的key名称：文件路径+名称
    fromTemps: #从模版创建secret，优先级2
      k8s.conf: |-
        a=1
        b=2
    fromDirs: #从指定目录中创建secret，文件名就是secret的key名称,优先级3
      - "**.yaml"
      - "conf/**.yaml"
service:
  apiVersion: v1
  labels: {}
  annotations: {}
  type: ClusterIP
  clusterIP: none
  publishNotReadyAddresses: true
  externalName: "" #当type=externalName时，这个属性设置外部名称
  ports:
    - port: 80 #必填
      targetPort: 80 #不填时默认为port的值
      nodePort: 80 #当type=NodePort得时候有效，不填时默认和port一样，填0表示系统自动生成端口号。
      protocol: TCP
      name: http #必填
role:
  apiVersion: rbac.authorization.k8s.io/v1
  labels: {}
  annotations: {}
  rules: []
  rolebinding: {}
  serviceAccountName: ""
cluster:
  role:
    apiVersion: rbac.authorization.k8s.io/v1
    labels: {}
    annotations: {}
    rules: []
  rolebinding: {}
  serviceAccountName: ""
ingress:
  apiVersion: networking.k8s.io/v1
  rules: []
  tls: []
  defaultBackend: []
  labels: {}
  annotations: {}
  ingressClassName: "" #指定ingressClass的实例名称，不填则默认为helm发布的ingressClass名称（ReleaseName）
ingressClass:
  apiVersion: networking.k8s.io/v1
  default: true #是否为默认ingressClass
  annotations: {}
  labels: {}
  controller: "nginx.org/ingress-controller" #默认nginx官方的ingress controller
  parameters: {}
